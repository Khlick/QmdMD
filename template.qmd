---
title: Test Draft Post
author: khrisgriffis
format: qmdmd-gfm
engine: knitr
meta:
  excerpt: |
    A test draft post
  options:
    - minihead
  categories:
    - missives
  tags:
    - featured
    - neuroscience
qmdmd:
  fig-rel: ".."
  fig-root: "assets/figures"
---
```{r}
#| label: setup
#| eval: true
# Currently, we can change the save directory if we use
# the R libraries knitr and reticulate for parsing chunks.
knitr::opts_chunk$set(
  fig.path = "./assets/images/"
)
```

```{r}
#| label: configure-python
library("reticulate")
matplotlib <- import("matplotlib")
```

## Introduction

This is a sample document to demonstrate the usage of the `qmdMD` Quarto extension.

## Code Example

Below is a simple Python code block that will be processed by the extension with chunk options, `#| echo: true` and `#| output: asis`.

```{python}
#| echo: true
#| output: asis
print('Hello world')
```

Let's also use R:

```{r}
#| echo: true
#| output: true
a <- 5+4
print(a)
```

Here is a plot in R where @fig-airquality further explores the impact of temperature on ozone level.

```{r}
#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```

## Code Example With Plot

```{python}
#| label: fig1
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```


## Code Example With Pretty Table

By setting the chunk option `#| html-table-processing: none`, Quarto will process the code chunk and return a _pretty_ table in HTML.

```{python}
#| html-table-processing: none
import pandas as pd

temps = pd.DataFrame({
  'year': [*range(1920, 1925)],
  'Jan': [40.6, 44.2, 37.5, 41.8, 39.3], 
  'Jun': [58.5, 58.7, 57.8, 52.7, 57.7]
}).set_index('year')

def make_pretty(styler):
  styler.background_gradient(axis=None,
    vmin=31, vmax=66, cmap="RdYlGn_r")
  return styler

temps.style.pipe(make_pretty)

```


## Inline Code Example

Let's generate a variable containing some calculated information in a code chunk, then use it later in markdown as inline 

```{r}
#| label: code-boot
set.seed(0)
data <- rchisq(20, df = 5)
xbar <- mean(data)

# Monte Carlo resampling function
bootstrap_resample <- function(data, n_resamples = 2000) {
  n <- length(data)
  resamples <- matrix(NA, nrow = n_resamples, ncol = n)
  for (i in 1:n_resamples) {
    resamples[i, ] <- sample(data, size = n, replace = TRUE)
  }
  return(resamples)
}

# Calculate bootstrap samples for confidence intervals
bootstrap_samples <- bootstrap_resample(data)
bootstrap_means <- apply(bootstrap_samples, 1, mean)

# Simple percentile 95% confidence intervals
alpha <- 0.05
ci95 <- quantile(bootstrap_means, probs = c(alpha / 2, 1 - alpha / 2))
```

The estimated mean of the sample is `{r} sprintf("%.3g (%.3g, %.3g)", xbar, ci95[1], ci95[2])`.

_Note: Inline expressions appear to only work for R chunks, i.e. `{{r}} expr`, when implied or defined engine is knitr. For example, the expression `{{python}} 1+1` produces `{python} 1+1` instead of 2._

## Math Example

We can use the fundamental theorem of calculus to say that 
$\int_2^3 x^2 \, dx=\frac{3^3}{3}-\frac{2^3}{3}=\frac{19}{3}$. 
And we can insert a `displaystyle` to the inline: $\displaystyle \int_2^3 x^2 \, dx=\frac{3^3}{3}-\frac{2^3}{3}=\frac{19}{3}$. 

We can also give this equation its own line

$$
	\int_2^3 x^2 \, dx=\frac{3^3}{3}-\frac{2^3}{3}=\frac{19}{3}.
$$

## Conclusion

This concludes the sample document. You can modify this template to suit your needs.
